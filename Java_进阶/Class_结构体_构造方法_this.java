package Java_进阶;


/*
 定义类(结构体)在public class 文件名{}之前定义，同理对于Java编译时候会创建2(或者多个，取决与创建多少个类)个class类文件
 		【定义类后运行首先类会被JVM的类加载器初始化,初始化包括设置静态变量和执行静态初始化代码块。
 				然而，不是所有在类中定义的变量都会在类加载时被初始化。】
 
 伪代码：
 class 类名{
 		//字段   初始化为0
 		 //方法
 		 //构造函数 (函数与方法不同，构造函数是没有返回值且函数名与类名必须相同
 		  			且不能用实例进行显示引用，只能用类变量进行传参)
 		  			说白了构造函数是另一种创建实例的方法。
 		  			构造函数可以初始化字段同时也创建了实例，因为初始化字段需要创建实例继续传参进入构造函数，初始化字段是在构造函数内进行的	
 		  			
***********************************************************
构造函数：：：
构造函数是用来创建类的新实例的。
它们是实例化类的过程的一部分。
构造函数不能直接被调用，因为它们没有返回类型。
不能通过一个实例来调用另一个实例的构造函数。构造函数是在创建新实例时由JVM自动调用的。
不能通过类名直接调用构造函数，因为它们没有返回类型，所以不能像普通方法那样被调用。
只能通过 `new` 关键字来创建一个新实例，这会自动调用构造函数。
***********************************************************
 		  
 }
 main方法{
 	类名 类变量名 =new 类名(函数参数);     -->> 对象(类似结构体变量，每个结构体变量对于编译器而言都是创建不同空间)
 	类变量名.类成员(字段，方法等)=值;   -->> 引用
 	
 }
例：
class A {  //构造类
	private int a;
	 A(int b) {  //构造函数
		b=a;
	}
	 int aaa() {  //构造方法
		 return a;
	 }
}
public class 源文件名{
	public static void main(String [] args){
		A aa = new A(2);  //创建类变量且在类变量进行传参给函数A的形参b为2
		aa.a=2; //报错因为private，所以只能用函数修改
		aa.aaa(); //通过方法来调用成员变量
	}
}
 */
class ya {  //构造类
	private int a1;
	 ya(int b) {  //构造函数
		b=a1;
	}
	 int aaa() {  //构造方法
		
		 return a1;
	 }
}

public class Class_结构体_构造方法_this{
	public static void main(String [] args){
		ya aa = new ya(2);  //创建类变量且在类变量进行传参给函数A的形参b为2
	//	aa.a=2; //报错因为private，所以只能用函数修改
		aa.aaa(); //通过方法来调用成员变量
		

	}
}


/*
注意地方：
创建两个相同类的不同对象，进行对象名比较，结果一定是不同的，因为开辟的空间地址不同（C也是如此）
*/
