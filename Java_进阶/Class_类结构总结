重点：：栈，堆，静态区

Class_类结构总结：：
 类声明结构：
 	class 类名 {
 		字段;		
 		构造函数(){		
 		}
 		方法(){				
 		}	
 	}
 	
初始化顺序：：
类初始化会放在JVM虚拟机的类初始化器初始化，但是类初始化器只初始化静态方法，字段，其次在JVM初始化速度会比main初始化更快

字段：
实例字段：实例字段即非静态字段，也就是说实例字段是与实例有关，不是类本身，同理在未创建实例时实例字段是不会在初始化的，不会随着类初始化而初始化
静态字段：静态字段必须创建在类同级下不能创建在方法或者构造函数中，static修饰的字段是属于类本身也就是说生命周期与类相同，作用域是整个类，与实例没有任何关系，且只初始化一次，对于每个实例都是共同的，初始化也是随着类初始化而初始化也就是在JVM初始化

构造函数：
构造函数主要用途：初始化字段等类成员的最佳场所，与普通方法类似，不过没有返回类型，方法名与类名相同。构造函数的初始化与实例紧紧挂钩，不会在JVM初始化

方法：
普通方法：普通方法也就是非静态方法，也就是说与实例挂钩，创建了实例才会初始化非静态方法
静态方法：静态方法也就是说属于类本身，与实例无关，在JVM初始化

关键字：this
this用于引用当前实例的字段和方法而设计的，也就是说不能通过this来引用静态字段或者方法！！
注意注意：使用this时候应该考虑上下文。

关键字：static(属于类本身，可以通过类名直接调用)
static与字段，构造函数，方法，this之间的关系
首先：static不能修饰构造函数，因为构造函数与实例紧密相关，构造函数是通过实例来初始化的，属于实例的不属于类本身，所以不能用static初始化

static访问权限：：
静态不能访问非静态：首先this是指当前对象也就是指向堆区的对象，而在静态属性储存在静态区所以在静态区使用this访问无效
静态可以访问静态：静态区内属性可以互相访问
非静态可以访问静态：理当来说非静态在堆区，静态在静态区，所以不能跨区域访问，所以当this在堆区访问静态区时候，编译器会自动转换为类名访问静态区成员
非静态可以访问非静态：堆区内属性可以互相访问

----------------------------------------------------------------------------------------------------------------------------------------------
在Java中，类体是用来定义类的结构的地方。类体可以包含以下几种类型的成员：
字段：类的变量，比如 int count;。
方法：类的函数，比如 void printHello();。
构造函数：类的特殊方法，用于创建对象时初始化对象，比如 MyClass() {}。
嵌套类：可以在类内部定义的其他类，比如 class NestedClass {}。
接口实现：如果类实现了接口，接口的方法实现也会在这里。
类体不能包含以下类型的代码：

普通的代码块：比如 for 循环、if 语句等。
new 关键字创建的对象实例：你不能在类体中直接写 new MyClass();。
这是因为类体是一个定义的地方，它告诉编译器这个类的结构是什么样的。它不应该是用来执行代码的地方。

如果你在类体中写了一段代码
比如一个 for 循环，每次你创建这个类的实例时，都会执行这段代码。这显然是不合理的，因为类应该只定义它的结构，而不是执行操作。
----------------------------------->>>>>>>>>>>
补充关于类与main方法中的实例调用
class MyClass{........}
MyClass obj = new MyClass(); // 构造方法初始化变量，但没有输出
System.out.println(obj);     // 隐式调用 obj.toString()
会隐式调用tostring也是哈希码等价地址
