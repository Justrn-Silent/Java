以下是用ASCII符号绘制的内存结构示意图，结合Java类型转换的典型场景进行说明：

---

### **一、基本类型强制转换（int → double）**
```java
int a = 10;
double b = (double) a;
```

#### 内存变化：
```
栈内存            堆内存
+-----+          （基本类型不占用堆内存）
| a   | → 10 (32位)
| b   | → 10.0 (64位 IEEE754)
+-----+
```

#### 转换过程：
1. 将int的32位二进制`00000000 00000000 00000000 00001010`  
2. 转换为double的64位格式：  
   `0 10000000010 0100000000000...`（符号位+指数+尾数）

---

### **二、引用类型强制转换（向上转型）**
```java
String str = "Hello";
Object obj = str;
```

#### 内存结构：
```
栈内存              堆内存
+-------+          +-----------------------+
| str   | → 0x100 | String对象 @0x100   |
| (String)         |   - Klass: String.class |
| obj   | → 0x100 |   - hash: 12345     |
| (Object)        |   - value: ['H','e'...]  |
+-------+          +-----------------------+
```

#### 关键点：
- 两个引用指向同一个堆对象
- 对象头的Klass Pointer始终指向String.class
- 向上转型不改变内存结构

---

### **三、非法强制转换（String → Number）**
```java
Object obj = new String("123");
Number num = (Number) obj; // ClassCastException
```

#### 内存结构：
```
栈内存              堆内存
+-------+          +-----------------------+
| obj   | → 0x200 | String对象 @0x200 |
| (Object)          |   - Klass: String.class|
| num   | → X     |   - value: ['1','2','3']|
+-------+          +-----------------------+
                  ↗ 转换失败
```

#### 类型验证过程：
1. 读取对象头中的Klass Pointer → String.class
2. 检查继承关系：String ∉ Number子类
3. 抛出ClassCastException

---

### **四、自动装箱过程（int → Integer）**
```java
int a = 127;
Integer b = a; // 自动装箱
```

#### 内存结构：
```
栈内存              堆内存
+-----+           +---------------------+
| a   | → 127    | Integer对象 @0x300   |
| (int)          |  - Klass: Integer.class
| b   | → 0x300  |   - value: 127       |
+-----+           +---------------------+
```

#### 特殊优化：
- -128~127之间的Integer对象会被缓存
- 使用`Integer.valueOf()`而非new创建对象

---

### **五、泛型类型擦除示例**
```java
List<String> list = new ArrayList<>();
list.add("test");
Object elem = list.get(0);
```

#### 编译后内存结构：
```
栈内存              堆内存
+-------+          +-----------------------+
| list  | → 0x400 | ArrayList @0x400      |
| (List)          |   - Klass: ArrayList  |
| elem  | → 0x400 |   - elementData:      |
+-------+          |     [0x500]          |
                   +-----------------------+
                   ↗ 
                 +-----------------------+
                 | String对象 @0x500     |
                 |   - value: ['t','e'..]|
                 +-----------------------+
```

#### 类型擦除特征：
- 运行时所有泛型类型变为Object
- 取元素时自动插入强制转换：  
  `(String) list.get(0)`

---

### **六、多态方法调用示例**
```java
class Animal { void sound(){} }
class Dog extends Animal { void sound(){ System.out.println("Woof"); } }

Animal a = new Dog();
a.sound();
```

#### 方法表结构：
```
Dog类方法表 @0x600
+-------------------+
| sound() → Dog实现 |
| toString()        |
| ...               |
+-------------------+
```

#### 调用过程：
1. 通过对象头Klass Pointer找到Dog类方法表
2. 定位sound()方法的实际实现地址
3. 执行Dog类重写的方法

---

### **关键结论图示**
```
+----------------+        +-----------------+
| 栈帧中的引用变量 |        | 堆内存中的对象     |
| (声明类型T)     | -----→ | Klass Pointer → |
+----------------+        | 实际类型U        |
                          +-----------------+
                             ↗ 若T与U无继承关系
                            ❌ ClassCastException
```

#### 内存铁律：
1. **对象类型不可变**：堆对象创建后类型永恒不变
2. **引用类型可变**：栈中的引用变量可指向不同对象
3. **类型安全双检**：编译器静态检查 + 运行时动态验证
