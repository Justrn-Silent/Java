package 抽象类_接口;
/*
·抽象方法
使用abstract修饰的方法，没有方法体，只有声明。
定义的是一种“规范”就是告诉子类必须要给抽象方法提供具体的实现。
·抽象类
包含抽象方法的类就是抽象类。通过abstract方法定义规范，然后要求子类必须定义具体实现。
通过抽象类，我们就可以做到严格限制子类的设计，使子类之间更加通用。
------------------------------
abstract 关键字主要用于定义抽象类和抽象方法。
抽象类
定义：抽象类是不能被实例化的类。它通常包含抽象方法和具体方法。
抽象方法：抽象方法是没有具体实现的方法，它只包含方法签名。抽象类至少要有一个抽象方法。
具体方法：抽象类可以包含具体方法，这些方法有具体的实现。

抽象方法
定义：抽象方法是只包含方法签名而不包含具体实现的方法。
用法：在抽象类中，你可以声明抽象方法，它必须在子类中被实现。

具体使用：
修饰类：当类被声明为 abstract 时，它不能被实例化。
修饰方法：当方法被声明为 abstract 时，它没有方法体，必须在子类中被实现。
抽象类中的抽象方法：抽象类中可以包含抽象方法，这些方法必须在子类中被实现。
抽象类中的具体方法：抽象类也可以包含具体方法，这些方法有具体的实现。
接口中的方法：虽然接口不能是抽象的，但接口中的所有方法默认都是抽象的。因此，你不需要在接口方法前使用 abstract 关键字。
*/

 abstract class AQ {
	abstract void test();
	void test01() {
		System.out.println("也可以在抽象类中定义具体类");
		/*抽象类可以提供部分实现，即它既可以包含抽象方法（没有实现的方法），也可以包含具体方法（有实现的方法）。
		 这种设计允许抽象类为它的子类提供一些默认行为，同时仍然保留抽象类的通用性和灵活性。*/
	}
}
class BQ extends AQ{
	//继承抽象类必须进行实现
	void test() {
		System.out.println("抽象类被实现");
	}
	
}
public  class 抽象方法_抽象类 {
	public static void main(String[] args) {
		AQ s =new BQ(); //不能写成：抽象方法_抽象类 s =new 抽象方法_抽象类();
		s.test();
		
	}
}

/*
抽象类的使用要点:
1.有抽象方法的类只能定义成抽象类
2.抽象类不能实例化，即不能用new来实例化抽象类。
3.抽象类可以包含属性、方法、构造方法。但是构造方法不能用来new实例，只能用来被子类调用。
4.因为不能new，所以抽象类只能用来被继承。
5.抽象方法必须被子类实现。
*/
